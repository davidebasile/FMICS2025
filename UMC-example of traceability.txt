-----------------------------------------------
-- SCENARIO 1  (22702 states)
--  Config: max_receive_timer = 3,
--          max_send_timer    = 1, 
--          max_connect_timer  = 3,
--          SAI.N             = 2,
--  Both RBC sides are inactive. 
--  The system il maintained live through th exchange of LifeSigns.
--  In case of failures the loop is restarted
--  INTRODUCED A BUG BY REPLACING "AND" WITH "OR" IN RULE R9_ICSL
--
--  NO DEADLOKS
--  No loss of event
-----------------------------------------------
Class I_CSL is
-----------------------------------------------
Signals
  SAI_CONNECT_confirm;
  SAI_DISCONNECT_indication;
  SAI_Error_report;
  SAI_DATA_indication(mtype,udata);
  RBC_User_Data_request(udata); 
  --
  icsl_tick;
  --  SAI CONNECTIONS ARE AUTONUMOUS, not requsted by RBC_User
  
  --       OUTGOING signals
  -- SAI_CONNECT_request;
  -- SAI_DISCONNECT_request;
  -- SAI_DATA_request(mtype,udata);
  -- RBC_User_Connect_indication;
  -- RBC_User_Disconnect_indication;
  -- RBC_User_Data_indication(udata);
  
Vars
  RBC_User:obj;
  SAI:obj;
  receive_timer := 0;
  send_timer := 0;   
  -------------
  max_receive_timer; -- CONFIGURATION PARAM
  max_send_timer;    -- CONFIGURATION PARAM
  max_connect_timer; -- CONFIGURATION PARAM
  connect_timer;     -- SAME VALUE of max_connect_timer
  connecting: bool := False;
  -------------

Behaviour

-------------------------------------------------------------
-- when disconnetted ignore NRBC_MSGs and SAI_Notifications,
-------------------------------------------------------------

R1_ICSL_discard_userdata:
   NOCOMMS -> NOCOMMS 
      {RBC_User_Data_request(udata) }
  
R2_ICSL_discard_dsconnectindication:
   NOCOMMS -> NOCOMMS 
      {SAI_DISCONNECT_indication }
  
R3_ICSL_discard_errorreport:
   NOCOMMS -> NOCOMMS 
      {SAI_Error_report}
  
R4_ICSL_discard_dataindication:
   NOCOMMS -> NOCOMMS 
     {SAI_DATA_indication(mtype,udata)}
   
   
-------------------------------------------------------------
-- establishing connections 
-------------------------------------------------------------

-- when disconnected issue new SAI connection request
--
R5_ICSL_connectiontimeout:
   NOCOMMS -> NOCOMMS 
      { icsl_tick [connect_timer = max_connect_timer] / 
          connect_timer := 0;
          Timer.ok_icsl;
          SAI.SAI_CONNECT_request; }


-- when connecting handle clock cycles 
--   and ignore all other events but connection confirmations
R6_ICSL_timecycle:
  NOCOMMS -> NOCOMMS 
      {icsl_tick [connect_timer < max_connect_timer] / 
         Timer.ok_icsl;
         connect_timer := connect_timer +1}

-- when connecting handle connection confirmation
--
R7_ICSL_rbcuserconnectindication:
  NOCOMMS -> COMMS 
     { SAI_CONNECT_confirm   / 
         RBC_User.RBC_User_Connect_indication;
         connect_timer := max_connect_timer; 
         receive_timer := 0;
         send_timer := 0; }

  --------------------------------
  -- handling active connections 
  --------------------------------
  
-- when connected forward RBC_User NRBC_MSGs    
--    
R8_ICSL_saidatarequest:
  COMMS -> COMMS 
     { RBC_User_Data_request(udata) /
        send_timer := 0;
        SAI.SAI_DATA_request(Data,udata); }
            
            
-- when connected, in no send or receive timers are expired, adjust timers
--
R9_ICSL_timecycle:
  COMMS -> COMMS 
      { icsl_tick [(receive_timer < max_receive_timer)
               or (send_timer < max_send_timer)] /   -----  <<<<<---- BUG introduced here  "and" replaces "or"
           Timer.ok_icsl;
           send_timer := send_timer +1;
           receive_timer := receive_timer+1; }
        
-- when connected, if the receive timer is not expired but send timer is expired, 
-- send lifesign
R10_ICSL_sendlifesign:
  COMMS -> COMMS 
      { icsl_tick [(receive_timer < max_receive_timer)
               and (send_timer = max_send_timer)] /                
           Timer.ok_icsl;
           send_timer := 0; 
           receive_timer := receive_timer+1;
           SAI.SAI_DATA_request(LifeSign,0) }
           
           
  -- when connected, is msg received from sai,forward to user and 
  --  reset receive timer; 
R11_ICSL_forwardsaidata:
  COMMS -> COMMS 
     {SAI_DATA_indication(mtype,udata) 
         [mtype  /= LifeSign] /
      receive_timer := 0;
      RBC_User.RBC_User_Data_indication(udata);
      }


-- when connected, if lifesign received from sai, reset receive timer;
--  
R12_ICSL_handle_lifesign:
  COMMS -> COMMS 
      {SAI_DATA_indication(mtype,udata) 
         [mtype = LifeSign] /
        receive_timer := 0;
      }

-- when connected, ignore SAI_Error_report
--
R13_ICSL_discard_errorreport:
  COMMS -> COMMS 
      {SAI_Error_report }
  
-- when connected, disconnect and forward notification when notified by SAI
-- (and clear timers)
--
R14_ICSL_rbcuserdisconnectindication:
  COMMS -> NOCOMMS 
     {SAI_DISCONNECT_indication /
        RBC_User.RBC_User_Disconnect_indication;
        receive_timer := 0;
        send_timer := 0 } 
  
  
-- when connected, if receive timer expires,disconnect, notify RBC_User and 
--  request SAI termination
--
R15_ICSL_receivetimeout:
  COMMS -> NOCOMMS 
      { icsl_tick [receive_timer = max_receive_timer] / 
           Timer.ok_icsl;
           RBC_User.RBC_User_Disconnect_indication;
           SAI.SAI_DISCONNECT_request;
           receive_timer := 0;
           send_timer := 0; }

end I_CSL;


-----------------------------------------------
Class I_SAI is 
-----------------------------------------------
Signals  
  SAI_CONNECT_request;
  SAI_DISCONNECT_request;  
  SAI_DATA_request(mtype,udata);
  --
  Sa_CONN_confirm;
  Sa_DATA(mtype,udata);
  Sa_CONN_terminate;
  --
  isai_tick;
  --       OUTGOING signals
  -- SAI_CONNECT_confirm;
  -- SAI_DISCONNECT_indication;
  -- SAI_DATA_indication(mtype,udata);
  -- SAI_Error_report;
  
  -- Sa_CONN_request;
  -- Sa_DATA(nrbc_msg);
  
  
Vars
  Priority := 0;
  NSAI:obj;
  CSL:obj;
  N:int := 1; 
  -- private
  sent_but_not_yet_received := 0; -- 0..N
  
Behaviour
  --------------------------------
  -- handling disconnections 
  --------------------------------

  -- when disconnected handle clock cycles and ignore all events 
  --   but connection requests 

R1_ISAI_timecycle:
  Disconnected -> Disconnected 
     {isai_tick / Timer.ok_isai}

R2_ISAI_discard_saconnterminate:
  Disconnected -> Disconnected 
    {Sa_CONN_terminate}
  
R3_ISAI_discard_sadata:
  Disconnected -> Disconnected 
    {Sa_DATA(mtype,udata) }
  
R4_ISAI_discard_saidatarequest:
  Disconnected -> Disconnected 
     {SAI_DATA_request(mtype,udata)}
  
R5_ISAI_discard_saidisconnectrequest:
  Disconnected -> Disconnected 
    {SAI_DISCONNECT_request}
  
R6_ISAI_discard_saconnconfirm:
  Disconnected -> Disconnected 
     {Sa_CONN_confirm}

  -- when disconnected accept connection requests from RBC
R7_ISAI_forwardsaiconnrequest:
  Disconnected -> Connecting 
      {SAI_CONNECT_request / 
         sent_but_not_yet_received :=0;
         NSAI.Sa_CONN_request;
       }
         
  --------------------------------
  -- establishing preconnections 
  --------------------------------
  
  -- when connecting handle clock cycles 
  --   and ignore all events but connection confirmations 
  -- Notice:  also repeated RBC_Conect_request are ignored.
  
R8_ISAI_timecycle:
  Connecting -> Connecting 
   {isai_tick / Timer.ok_isai}
  
R9_ISAI_discard_saconnterminate:
  Connecting -> Connecting 
   {Sa_CONN_terminate}
  
R10_ISAI_discard_sadata:
  Connecting -> Connecting 
    {Sa_DATA(mtype,udata) }

R11_ISAI_discard_SAI_DATA_request:
  Connecting -> Connecting 
    {SAI_DATA_request(mtype,udata)}
  
R12_ISAI_discard_saidisconnectrequest:
  Connecting -> Connecting 
    {SAI_DISCONNECT_request}
  
  -- when requested by, try connection again.
R13_ISAI_forwardsaiconnrequest:
  Connecting -> Connecting 
      {SAI_CONNECT_request / 
         sent_but_not_yet_received :=0;
         NSAI.Sa_CONN_request;
       }

  -- connection confirmation arrived from neighbor SAI
R15_ISAI_forwardsaconnectconfirm:
  Connecting -> Connected 
      {Sa_CONN_confirm /
           CSL.SAI_CONNECT_confirm; }

  -- ER loss of connection confirmation message
R14_ISAI_discardsaconnconfirm:
  Connecting -> Connecting 
      {Sa_CONN_confirm }
        
  --------------------------------
  -- handling connections 
  --------------------------------
  
  -- when connected handle clock cycles 
R16_ISAI_timecycle:
  Connected ->  Connected 
    {isai_tick /
      Timer.ok_isai}
  
  -- when already connected further repeated RBC_Conect_request are ignored.
R17_ISAI_discard_saiconnectrequest:
  Connected -> Connecting 
     {SAI_CONNECT_request}
   
  ---------------------------------
  -- sending CSL messages NSAI
  --------------------------------
  
  -- send NRBC msg to NSAI
R18_ISAI_forwardsaidata:
  Connected -> Connected 
      {SAI_DATA_request(mtype,udata)  / 
        NSAI.Sa_DATA(mtype,udata);
      }

  ---------------------------------
  -- receiving or losing messages
  --------------------------------

  -- deliver NRBC Msg to APP
  --  with no other notification if not invalid and not out of sequence
R21_ISAI_forwardsadataindication:
  Connected -> Connected 
      {Sa_DATA(mtype,udata) [sent_but_not_yet_received = 0] / 
         CSL.SAI_DATA_indication(mtype,udata);
       }

  -- deliver NRBC Msg if not invalid but slightly out of sequence, 
  --  and notify the error
R22_ISAI_forwardsadataindicationwitherror:
  Connected -> Connected 
      {Sa_DATA(mtype,udata) 
          [sent_but_not_yet_received < N and sent_but_not_yet_received > 0] / 
         CSL.SAI_DATA_indication(mtype,udata);
         CSL.SAI_Error_report;
         sent_but_not_yet_received :=0;
       }
       
  -- not yet evident msg delay or loss (abstraction of ER layer)
  --  NOTICE: no need to increment counet to a value greater than N
R19_ISAI_nsloss_sadata:
  Connected -> Connected 
      {Sa_DATA(mtype,udata) [sent_but_not_yet_received < N]/ 
         sent_but_not_yet_received := sent_but_not_yet_received+1; }

  -- do not deliver to APP invalid msgs (too late but in correct sequence)
R20_ISAI_discarddatawitherror:
  Connected -> Connected 
      {Sa_DATA(mtype,udata) [sent_but_not_yet_received = 0] / 
       CSL.SAI_Error_report;
       }

  -- do not deliver NRBC Msg if invalid, when slightly out of sequence, 
  --  but notify both error situations
R23_ISAI_discarddatawitherror:
  Connected -> Connected 
      {Sa_DATA(mtype,udata) 
          [sent_but_not_yet_received < N and sent_but_not_yet_received > 0] / 
         CSL.SAI_Error_report;
         sent_but_not_yet_received :=0;
       }

  ---------------------------------
  -- handling disconnections
  --------------------------------
  
 -- notify disconnection if the last msgs shows an excessive msg delay or loss
R24_ISAI_saidisconnectindication:
  Connected -> Disconnected 
      {Sa_DATA(mtype,udata) [sent_but_not_yet_received = N] / 
         NSAI.Sa_CONN_terminate;     
         CSL.SAI_DISCONNECT_indication;
         sent_but_not_yet_received :=0;
       }


  -- when connected, become disconnected upon termination request from RBC
R25_ISAI_sconnterminate:
  Connected  -> Disconnected
    {SAI_DISCONNECT_request /
       NSAI.Sa_CONN_terminate;
       sent_but_not_yet_received :=0;
    }


  -- when connected, become disconnected upon termination request from NSAI
R26_ISAI_saidisconnectindication:
   Connected ->  Disconnected
      {Sa_CONN_terminate /
         CSL.SAI_DISCONNECT_indication;
         sent_but_not_yet_received :=0; }


  -- But disconnection indication from ER can get lost!!
R27_ISAI_ndloss_saconnterminate:
   Connected ->  Connected
      {Sa_CONN_terminate}
      
end I_SAI;

-----------------------------------------------
Class C_SAI is
-----------------------------------------------
Signals  
  SAI_CONNECT_request; -- only for ISAI
  SAI_DISCONNECT_request;  
  SAI_DATA_request(mtype,udata);
  --
  Sa_CONN_request;
  Sa_DATA(mtype,udata);
  Sa_CONN_terminate;
  --
  csai_tick;
  
  --  OUTGOING signals
  -- SAI_CONNECT_indication;
  -- SAI_DISCONNECT_indication;
  -- SAI_DATA_indication(mtype,udata);
  -- SAI_Error_report;
  
  -- Sa_CONN_confirm;
  -- Sa_DATA(mtype,udata);
  
Vars
  Priority := 0;
  NSAI:obj;
  CSL:obj;
  sent_but_not_yet_received :=0;
  N:int := 1;  
  
Behaviour
  --------------------------------
  -- handling disconnections 
  --------------------------------
  
  -- when disconnected handle clock cycles and ignore all events 
  --   but connection requests 

R1_CSAI_timecycle:
  Disconnected -> Disconnected 
     {csai_tick/ Timer.ok_csai}
  
R2_CSAI_discard_saconnterminate:
  Disconnected -> Disconnected 
     {Sa_CONN_terminate}
  
R3_CSAI_discard_sadata:
  Disconnected -> Disconnected 
     {Sa_DATA(mtype,udata) }
  
R4_CSAI_discard_saidatarequest:
  Disconnected -> Disconnected 
     {SAI_DATA_request(mtype,udata)}
  
R5_CSAI_discard_saidisconnectrequest:
  Disconnected -> Disconnected {
     SAI_DISCONNECT_request}
  
  -- wait NSAI connection requests to establish connection
R6_CSAI_saiconnectindication:
  Disconnected -> Connected 
      {Sa_CONN_request / 
         NSAI.Sa_CONN_confirm;
         CSL.SAI_CONNECT_indication;
         sent_but_not_yet_received :=0; }

  --  model also the ER level loss of connection request
R7_CSAI_discard_saconnrequest:
  Disconnected -> Disconnected 
     {Sa_CONN_request }
         
  --------------------------------
  -- handling connections 
  --------------------------------
  
  -- when connected handle clock cycles 
R8_CSAI_timecycle:
  Connected ->  Connected 
     {csai_tick / Timer.ok_csai}
  
  -- connection reset by NSAI initiator
  -- notice: this should never happen if new connection request must be preceded 
  --          by previous connection termination!!
R9_CSAI_saiconnectindication:
  Connected -> Connected 
      {Sa_CONN_request / 
         NSAI.Sa_CONN_confirm;
         CSL.SAI_CONNECT_indication;
         sent_but_not_yet_received :=0; }

  -- ER loss of sa_conn_request    -- THIS WAS MISSING!!!!     ERROR
R10_CSAI_ndloss_saconnrequest:
  Connected -> Connected  
     {Sa_CONN_request}
  
  ---------------------------------
  -- sending CSL messages NSAI
  --------------------------------
  
  -- send NRBC msg to NSAI
R11_CSAI_forwardsaidata:
  Connected -> Connected 
      {SAI_DATA_request(mtype,udata)  / 
            NSAI.Sa_DATA(mtype,udata); }

  
  ---------------------------------
  -- receiving or losing messages
  --------------------------------
  
  -- deliver NRBC Msg to APP
  --  with no other notification if not invalid and not out of sequence
R14_CSAI_saidataindication:
  Connected -> Connected 
      {Sa_DATA(mtype,udata) [sent_but_not_yet_received = 0] / 
         CSL.SAI_DATA_indication(mtype,udata);
       }

  -- deliver NRBC Msg if not invalid but slightly out of sequence, 
  --   and notify the error
R15_CSAI_saidataindicationwitherror:
  Connected -> Connected 
      {Sa_DATA(mtype,udata) 
               [sent_but_not_yet_received < N and sent_but_not_yet_received > 0] /
         CSL.SAI_DATA_indication(mtype,udata); 
         CSL.SAI_Error_report;
         sent_but_not_yet_received :=0;
       }

  -- not yet evident msg delay or loss (abstraction of ER layer)
  --  NOTICE: no need to increment count to a value greater than N
R12_CSAI_nsloss_sadata :
  Connected -> Connected 
      {Sa_DATA(mtype,udata) [sent_but_not_yet_received < N]/ 
         sent_but_not_yet_received := sent_but_not_yet_received+1; }

  -- do not deliver to APP invalid msgs (too late but in correct sequence)
R13_CSAI_ndinvalis_sadata:
  Connected -> Connected 
      {Sa_DATA(mtype,udata) [sent_but_not_yet_received = 0] / 
       CSL.SAI_Error_report;
       }

  -- do not deliver NRBC Msg if invalid, when slightly out of sequence, 
  --  but notify both error situations
R16_CSAI_saierrorreport:
  Connected -> Connected 
      {Sa_DATA(mtype,udata) 
               [sent_but_not_yet_received < N and sent_but_not_yet_received > 0] / 
         CSL.SAI_Error_report;
         sent_but_not_yet_received :=0;
       }
       
  ---------------------------------
  -- handling connection failures
  --------------------------------
  
 -- notify disconnection if the last msgs shows an excessive msg delay or loss
 R17_CSAI_saidisconnectindication:
  Connected -> Disconnected 
      {Sa_DATA(mtype,udata) [sent_but_not_yet_received = N] / 
         NSAI.Sa_CONN_terminate;     
         CSL.SAI_DISCONNECT_indication;
         sent_but_not_yet_received :=0;
       }

  ---------------------------------
  -- handling disconnection requests
  --------------------------------
  -- when connected, become disconnected upon termination request from RBC
R18_CSAI_saconnterminate:
  Connected  -> Disconnected
    {SAI_DISCONNECT_request /
       NSAI.Sa_CONN_terminate;
       sent_but_not_yet_received :=0;
     }

  -- when connected, become disconnected upon termination request from NSAI
R19_CSAI_saidisconnectindication:
   Connected ->  Disconnected
      {Sa_CONN_terminate /
         CSL.SAI_DISCONNECT_indication;
         sent_but_not_yet_received :=0; }

  -- But disconnection indication from ER can get lost!!
R20_CSAI_ndloss_saconnterminate:
   Connected ->  Connected
      {Sa_CONN_terminate}
      
end C_SAI;


-----------------------------------------------
Class C_CSL is
-----------------------------------------------
Signals
  SAI_CONNECT_indication;
  SAI_DISCONNECT_indication;
  SAI_DATA_indication(mtype,udata);
  SAI_Error_report;
  --
  RBC_User_Data_request(udata);
  --
  ccsl_tick;

  --       OUTGOING signals
  -- SAI_DISCONNECT_request;
  -- SAI_DATA_request(mtype,udata);
  -- RBC_User_Connect_indication;
  -- RBC_User_Disconnect_indication;
  -- RBC_User_Data_indication(mtype,udata);
  
Vars
  RBC_User:obj;
  SAI:obj;
  receive_timer :=0;
  send_timer := 0;
  -------------
  max_receive_timer := 4;
  max_send_timer := 2;
  max_connect_timer := 4; -- actually Unused in Called CSL
  connect_timer := 4;     -- actually Unused in Called CSL
  -------------
  
Behaviour

  --------------------------------------------------------------
  -- when disconnetted ignore NRBC_MSGs and SAI_Notifications, 
  -- just handle clock cycles
  --------------------------------------------------------------

R1_CCSL_discard_userdata :
  NOCOMMS -> NOCOMMS 
     {RBC_User_Data_request(udata) }
  
R2_CCSL_discard_dsconnectindication:
  NOCOMMS -> NOCOMMS 
    {SAI_DISCONNECT_indication}
  
R3_CCSL_discard_errorreport:
  NOCOMMS -> NOCOMMS 
    {SAI_Error_report}
  
R4_CCSL_discard_dataindication:
  NOCOMMS -> NOCOMMS 
   {SAI_DATA_indication(mtype,udata)}
         

  --------------------------------
  -- establishing connections 
  --------------------------------
  
-- when disconnected just wait for SAI_CONNECT_indication
--
R7_CCSL_tiomecycle:
  NOCOMMS -> NOCOMMS  
     {ccsl_tick / 
        Timer.ok_ccsl}

  --------------------------------
  -- handling connection indications 
  --------------------------------
  
-- when disconnected, accept SAI_CONNECT_indication and 
-- set send and receive timers
--
R8_CCSL_rbcuserconnectindication:
  NOCOMMS  -> COMMS 
    { SAI_CONNECT_indication /  
       RBC_User.RBC_User_Connect_indication;
       receive_timer := 0;
       send_timer :=0; }
        
  -- when connected, still accept SAI connection notifications and reset timers
R9_CCSL_rbcuserconnectindication: 
  COMMS -> COMMS 
      { SAI_CONNECT_indication / 
         RBC_User.RBC_User_Connect_indication;
         receive_timer := 0;
         send_timer := 0; } 
         
  --------------------------------
  -- handling active connections 
  --------------------------------
  
-- when connected forward RBC_User NRBC_MSGs 
--
R10_CCSL_forwarduserdatarequest:       
  COMMS -> COMMS 
     { RBC_User_Data_request(udata) /
        send_timer := 0;
        SAI.SAI_DATA_request(Data,udata); }
        
  -- when connected, in no send or receive timers are expired, adjust timers
R11_CCSL_timecycle:
  COMMS -> COMMS 
      { ccsl_tick [(receive_timer < max_receive_timer)
               and (send_timer < max_send_timer)] / 
           Timer.ok_ccsl;
           send_timer := send_timer +1;
           receive_timer := receive_timer+1;  }

  -- when connected, if the receive timer is not expired but send timer is expired, 
  --   send lifesign
R12_CCSL_sendlifesign:
  COMMS -> COMMS 
      { ccsl_tick [(receive_timer < max_receive_timer)
               and (send_timer = max_send_timer)] / 
           Timer.ok_ccsl;
           send_timer := 0; 
           receive_timer := receive_timer+1;
           SAI.SAI_DATA_request(LifeSign,0) }


  -- when connected, is msg received from sai,forward to user and 
  --  reset receive timer; 
R13_CCSL_forwardsaidata:
  COMMS -> COMMS 
      {SAI_DATA_indication(mtype,udata) 
          [mtype /= LifeSign] /
        receive_timer := 0;
        RBC_User.RBC_User_Data_indication(udata);
      }
      
-- when connected, if lifesign received from sai, reset receive timer;
--  
R14_CCSL_handle_lifesign:
  COMMS -> COMMS 
      {SAI_DATA_indication(mtype,udata) 
        [mtype = LifeSign] /
        receive_timer := 0;
      }
       
-- when connected, ignore SAI_Error_report
--
R15_CCSL_discarderrorreport:
  COMMS -> COMMS 
     {SAI_Error_report }

-- when connected, disconnect and forward notification when notified by SAI
-- (and clear timers)
--
R16_CCSL_rbcuserdisconnectindication:
  COMMS -> NOCOMMS 
     {SAI_DISCONNECT_indication /
        RBC_User.RBC_User_Disconnect_indication;
        receive_timer := 0;
        send_timer := 0 } 
  
-- when connected, if receive timer expires,disconnect, notify RBC_User and 
--  request SAI termination
--
R17_CCSL_receivetimeout:
  COMMS -> NOCOMMS 
      { ccsl_tick [receive_timer = max_receive_timer] / 
           Timer.ok_ccsl;
           RBC_User.RBC_User_Disconnect_indication;
           SAI.SAI_DISCONNECT_request;
           receive_timer := 0;
           send_timer := 0; }

end C_CSL


-----------------------------------------------
Class Clock is
-----------------------------------------------
Signals
  ok_irbc, ok_icsl, ok_isai, ok_csai, ok_ccsl, ok_crbc;
Vars
 Priority := 0;
 O1,O2,O3,O4,O5,O6: obj;
Behaviour

R1_Timer_irbc_tick:
  s0 -> s1 {- /
       O1.irbc_tick;}

R2_Timer_icsl_tick:
  s1 -> s1 {ok_irbc / O2.icsl_tick; }

R3_Timer_isai_tick:
  s1 -> s1 {ok_icsl / O3.isai_tick; }

R5_Timer_ccsl_tick:
  s1 -> s1 {ok_isai / O5.ccsl_tick; }

R4_Timer_csai_tick:
  s1 -> s1 {ok_ccsl / O4.csai_tick; }

R6_Timer_crbc_tick:
  s1 -> s1 {ok_csai / O6.crbc_tick; }

R7_Timer_irbc_tick:
  s1 -> s1 {ok_crbc / O1.irbc_tick; }
  
end Clock;



-----------------------------------------------
-----------------------------------------------

Class I_RBC_User is
Signals
   RBC_User_Connect_indication;
   RBC_User_Disconnect_indication;
   RBC_User_Data_indication(udata);
   irbc_tick;

Vars
   CSL: obj;
   
Behaviour

R1_IRBC_Timer_okirbc:
   idle -> idle 
      { irbc_tick /
         Timer.ok_irbc;}

R2_IRBC_discard_connectindication:
   idle -> idle
      { RBC_User_Connect_indication }

R3_IRBC_discard_dataindication:
   idle  -> idle 
      { RBC_User_Data_indication(udata)}
      
R4_IRBC_discard_disconnectindication:
   idle -> idle  
     { RBC_User_Disconnect_indication}
       
end I_RBC_User;


-----------------------------------------------
-----------------------------------------------

Class C_RBC_User is
Signals
   RBC_User_Connect_indication;
   RBC_User_Disconnect_indication;
   RBC_User_Data_indication(udata);
   crbc_tick;
   
Vars
   CSL: obj;
   
Behaviour

initial -> idle

R1_CRBC_Timer_okcrbc:
   idle  -> idle   
    { crbc_tick / 
      Timer.ok_crbc;}

R2_CRBC_discard_connectindication:
   idle -> idle 
    { RBC_User_Connect_indication }

R3_CRBC_discard_dataindication:
   idle -> idle 
    { RBC_User_Data_indication(udata)}

R4_CRBC_discard_disconnectindication:
   idle -> idle  
    { RBC_User_Disconnect_indication }
    
end C_RBC_User;


Objects:

LifeSign, Data: Token;

_I_RBC_User: I_RBC_User (CSL -> I_CSL);

I_CSL: I_CSL (RBC_User -> _I_RBC_User, SAI -> I_SAI, 
            max_receive_timer  -> 2, max_send_timer -> 1, 
            max_connect_timer -> 3, connect_timer -> 3);
            
I_SAI: I_SAI (CSL -> I_CSL, NSAI => _C_SAI,   N=> 2);

_C_SAI: C_SAI (CSL -> _C_CSL,  NSAI -> I_SAI,  N=> 2);
            
_C_CSL: C_CSL (RBC_User -> _C_RBC_User, SAI -> _C_SAI, 
            max_receive_timer  -> 2, max_send_timer -> 1);
            
_C_RBC_User: C_RBC_User (CSL -> _C_CSL);

Timer: Clock (O1 -> _I_RBC_User, O2 -> I_CSL, O3 -> I_SAI, 
               O4 -> _C_SAI,   O5 -> _C_CSL,  O6 -> _C_RBC_User);

------------------
--    13131 total states
--    total states generated= 578, computations fragments generated= 1124, total evaluation time= 0.174 sec.
------------------

Abstractions {
  TLABELS
  Action: lostevent($1) -> lostevent($1)
  Action: $1($*)  -> $1($*)
--  State:  maxqueuesize=$1  -> MQS($1)
  State: I_CSL.send_timer > I_CSL.max_send_timer -> sendTimer_Error
}

-----------------------------------------------------------------
--  PROPERTIES:   EF (sendTimer_Error)      -----
-----------------------------------------------------------------
